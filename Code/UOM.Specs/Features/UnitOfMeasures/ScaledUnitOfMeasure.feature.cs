// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UOM.Specs.Features.UnitOfMeasures
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ConvertingUnitOfMeasuresFeature : Xunit.IClassFixture<ConvertingUnitOfMeasuresFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ScaledUnitOfMeasure.feature"
#line hidden
        
        public ConvertingUnitOfMeasuresFeature(ConvertingUnitOfMeasuresFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Converting unit of measures", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Converting scaled to base unit of measure")]
        [Xunit.TraitAttribute("FeatureTitle", "Converting unit of measures")]
        [Xunit.TraitAttribute("Description", "Converting scaled to base unit of measure")]
        public virtual void ConvertingScaledToBaseUnitOfMeasure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Converting scaled to base unit of measure", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "IsoCode",
                        "Title"});
            table1.AddRow(new string[] {
                        "GR",
                        "Gram"});
#line 4
 testRunner.Given("I have already registered a base uom as following", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseUom",
                        "IsoCode",
                        "Title",
                        "Factor"});
            table2.AddRow(new string[] {
                        "GR",
                        "KG",
                        "Kilogram",
                        "1000"});
#line 7
 testRunner.And("I have already registered a scaled uom as following", ((string)(null)), table2, "And ");
#line 10
 testRunner.When("I try to covert \'200\' \'GR\' to \'KG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("The result should be \'0.2\' \'KG\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Converting scalsed to another scaled unit of measure")]
        [Xunit.TraitAttribute("FeatureTitle", "Converting unit of measures")]
        [Xunit.TraitAttribute("Description", "Converting scalsed to another scaled unit of measure")]
        public virtual void ConvertingScalsedToAnotherScaledUnitOfMeasure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Converting scalsed to another scaled unit of measure", null, ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "IsoCode",
                        "Title"});
            table3.AddRow(new string[] {
                        "GR",
                        "Gram"});
#line 14
 testRunner.Given("I have already registered a base uom as following", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseUom",
                        "IsoCode",
                        "Title",
                        "Factor"});
            table4.AddRow(new string[] {
                        "GR",
                        "KG",
                        "Kilogram",
                        "1000"});
#line 17
 testRunner.And("I have already registered a scaled uom as following", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseUom",
                        "IsoCode",
                        "Title",
                        "Factor"});
            table5.AddRow(new string[] {
                        "GR",
                        "HK",
                        "Hundred Kilograms",
                        "100000"});
#line 20
 testRunner.And("I have already registered a scaled uom as following", ((string)(null)), table5, "And ");
#line 23
 testRunner.When("I try to covert \'1000\' \'KG\' to \'HK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("The result should be \'0.01\' \'HK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ConvertingUnitOfMeasuresFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ConvertingUnitOfMeasuresFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProductManagment.Specs.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GenericProductFeature : Xunit.IClassFixture<GenericProductFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GenericProduct.feature"
#line hidden
        
        public GenericProductFeature(GenericProductFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GenericProduct", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Root Generic Product")]
        [Xunit.TraitAttribute("FeatureTitle", "GenericProduct")]
        [Xunit.TraitAttribute("Description", "Root Generic Product")]
        public virtual void RootGenericProduct()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Root Generic Product", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 testRunner.Given("I have a generic product called \'Mobile Phone\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constraint",
                        "Type",
                        "Value",
                        "UOM"});
            table1.AddRow(new string[] {
                        "Weight",
                        "NumericRange",
                        "50-1000",
                        "GR"});
            table1.AddRow(new string[] {
                        "Guarantee",
                        "Boolean",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "OS",
                        "Selective",
                        "IOS-Android-Symbian",
                        ""});
#line 8
 testRunner.And("\'Mobile Phone\' has the following constraints", ((string)(null)), table1, "And ");
#line 13
 testRunner.When("I register the \'Mobile Phone\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("It should be appear in the list of products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Child Generic Product with limited constaints")]
        [Xunit.TraitAttribute("FeatureTitle", "GenericProduct")]
        [Xunit.TraitAttribute("Description", "Child Generic Product with limited constaints")]
        public virtual void ChildGenericProductWithLimitedConstaints()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Child Generic Product with limited constaints", null, ((string[])(null)));
#line 16
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 17
 testRunner.Given("I have a generic product called \'Mobile Phone\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constraint",
                        "Type",
                        "Value",
                        "UOM"});
            table2.AddRow(new string[] {
                        "Weight",
                        "NumericRange",
                        "50-1000",
                        "GR"});
            table2.AddRow(new string[] {
                        "Guarantee",
                        "Boolean",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "OS",
                        "Selective",
                        "IOS-Android-Symbian",
                        ""});
#line 18
 testRunner.And("\'Mobile Phone\' has the following constraints", ((string)(null)), table2, "And ");
#line 23
 testRunner.And("I have a generic product called \'Smart Mobile Phone\' with parent \'Mobile Phone\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constraint",
                        "Type",
                        "Value",
                        "UOM"});
            table3.AddRow(new string[] {
                        "Weight",
                        "NumericRange",
                        "50-300",
                        "GR"});
            table3.AddRow(new string[] {
                        "Guarantee",
                        "Boolean",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "OS",
                        "Selective",
                        "IOS-Android",
                        ""});
#line 24
 testRunner.And("\'Smart Mobile Phone\' has the following constraints", ((string)(null)), table3, "And ");
#line 29
 testRunner.When("I register the \'Smart Mobile Phone\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("It should be appear in the list of products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GenericProductFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GenericProductFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
